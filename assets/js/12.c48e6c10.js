(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{255:function(n,t,e){"use strict";e.r(t);var i=e(0),l=Object(i.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"vue-quill-editor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-quill-editor","aria-hidden":"true"}},[n._v("#")]),n._v(" vue-quill-editor")]),n._v(" "),e("p",[e("strong",[n._v("前言：")]),n._v("在项目中遇到一个需要富文本编辑器的功能，上午查看发现vue-quill-editor这个插件好评挺多的，github点赞量也挺高的，所以我也就直接使用这个编辑器了")]),n._v(" "),e("ol",[e("li",[n._v("先安装vue-quill-editor和quill")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("npm install vue-quill-editor quill -S\n")])])]),e("p",[n._v("2.全局引入")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import { quillEditor } from 'vue-quill-editor' // 调用富文本编辑器\nimport 'quill/dist/quill.snow.css' // 富文本编辑器外部引用样式  三种样式三选一引入即可\n//import 'quill/dist/quill.core.css'\n//import 'quill/dist/quill.bubble.css'\nimport * as Quill from 'quill'; // 富文本基于quill\n")])])]),e("p",[n._v("3.使用")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<template>\n<quill-editor\n  v-model="content" // 编辑框中的内容\n  ref="myQuillEditor"\n  :options="editorOption" // 编辑器toolbar配置项\n  @focus="onEditorFocus($event)" // 聚焦事件\n  @blur="onEditorBlur($event)" // 失焦事件\n  @change="onEditorChange($event)"> // 改变事件\n</quill-editor>\n</template>\n\n<script>\nimport { quillEditor } from "vue-quill-editor"; //调用编辑器\nimport \'quill/dist/quill.core.css\';\nimport \'quill/dist/quill.snow.css\';\nimport \'quill/dist/quill.bubble.css\';\nexport default {\n    components: {\n        quillEditor\n    },\n    data() {\n        return {\n            content: `<p>welcome to use</p>\n            editorOption: {\n              toolbar:[]\n            }\n        }\n    },\n    methods: {\n        onEditorReady(editor) { // 准备编辑器\n \n        },\n        onEditorBlur(){}, // 失去焦点事件\n        onEditorFocus(){}, // 获得焦点事件\n        onEditorChange({quill,html,text}){\n          // quill:对应实例\n          // html:对应html结构\n          // text:对应文本内容\n        }, // 内容改变事件\n    },\n    computed: {\n        editor() {\n            return this.$refs.myQuillEditor.quill;\n        },\n    },\n    created() {\n        // ...请求，拿到后台返回的内容对content进行赋值\n    }\n}\n<\/script>\n')])])]),e("p",[n._v("4.配置你需要的功能")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("toolbar:[\n  ['bold', 'italic', 'underline', 'strike'],    //加粗，斜体，下划线，删除线\n  ['blockquote', 'code-block'],     //引用，代码块\n  [{ 'header': 1 }, { 'header': 2 }],        // 标题，键值对的形式；1、2表示字体大小\n  [{ 'list': 'ordered'}, { 'list': 'bullet' }],     //列表\n  [{ 'script': 'sub'}, { 'script': 'super' }],   // 上下标\n  [{ 'indent': '-1'}, { 'indent': '+1' }],     // 缩进\n  [{ 'direction': 'rtl' }],             // 文本方向\n  [{ 'size': ['small', false, 'large', 'huge'] }], // 字体大小\n  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],     //几级标题\n  [{ 'color': [] }, { 'background': [] }],     // 字体颜色，字体背景颜色\n  [{ 'font': [] }],     //字体\n  [{ 'align': [] }],    //对齐方式\n  ['clean'],    //清除字体样式\n  ['image','video']    //上传图片、上传视频\n]\n")])])]),e("blockquote",[e("p",[n._v("一切准备就绪，说下我在富文本编辑器中需要做的功能，在我富文本编辑器上有一排按钮，当点击对应按钮的时候在富文本输入栏光标停止的位置中显示按钮中对应的信息且颜色要高亮")])]),n._v(" "),e("ul",[e("li",[n._v("当时我的想法是在失焦事件中拿到对应文本然后拼接内容然后重新赋值data中"),e("code",[n._v("content")]),n._v("的值，发现并不理想，面向百度编程发现居然也有相类似的需求，直接可以拿到光标位置")])]),n._v(" "),e("blockquote",[e("p",[n._v("直接上代码")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('  // 拿到按钮中的文本信息\n  getContent(data) {\n    this.getCursorPosition();\n    this.setCharacter(data.name, this.curTxtPoint);\n  },\n  //获取当前模板文本域的光标位置\n  getCursorPosition() {\n    this.curTxtPoint = this.$refs.myQuillEditor.quill.selection.savedRange.index;\n  },\n  //插入文本的方式\n  setCharacter(str, index) {\n    this.curTxtPoint = "";\n    this.$refs.myQuillEditor.quill.insertText(index, str, { color: "red" }); // 插入时，可以随意改变插入的文本颜色\n  },\n')])])]),e("p",[n._v("5.整体代码如下")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<template>\n  <div class=\"content\">\n    <div class=\"tags\">\n      <ul class=\"operation\">\n        <li\n          class=\"item\"\n          v-for=\"item in operationList\"\n          :key=\"item.id\"\n          @click=\"getContent(item)\"\n        >{{item.name}}\n        </li>\n      </ul>\n    </div>\n    <div class=\"rich_editor\">\n      <quill-editor\n      v-model=\"content\" // 编辑框中的内容\n      ref=\"myQuillEditor\"\n      :options=\"editorOption\" // 编辑器toolbar配置项\n      @focus=\"onEditorFocus($event)\" // 聚焦事件\n      @blur=\"onEditorBlur($event)\" // 失焦事件\n      @change=\"onEditorChange($event)\"> // 改变事件\n    </quill-editor>\n    </div>\n  </div>\n</template>\n<script>\nimport { quillEditor } from \"vue-quill-editor\"; //调用编辑器\nimport 'quill/dist/quill.core.css';\nimport 'quill/dist/quill.snow.css';\nimport 'quill/dist/quill.bubble.css';\nexport default {\n    components: {\n        quillEditor\n    },\n    data() {\n        return {\n            content: `<p>welcome to use</p>,\n            editorOption: {\n              toolbar:[\n                ['bold', 'italic', 'underline', 'strike'],    //加粗，斜体，下划线，删除线\n                ['blockquote', 'code-block'],     //引用，代码块\n                [{ 'header': 1 }, { 'header': 2 }],        // 标题，键值对的形式；1、2表示字体大小\n                [{ 'list': 'ordered'}, { 'list': 'bullet' }],     //列表\n                [{ 'script': 'sub'}, { 'script': 'super' }],   // 上下标\n                [{ 'indent': '-1'}, { 'indent': '+1' }],     // 缩进\n                [{ 'direction': 'rtl' }],             // 文本方向\n                [{ 'size': ['small', false, 'large', 'huge'] }], // 字体大小\n                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],     //几级标题\n                [{ 'color': [] }, { 'background': [] }],     // 字体颜色，字体背景颜色\n                [{ 'font': [] }],     //字体\n                [{ 'align': [] }],    //对齐方式\n                ['clean'],    //清除字体样式\n                ['image','video']    //上传图片、上传视频\n              ]\n            },\n            operationList: [\n            { id: 1, name: \"#内容一#\" },\n            { id: 2, name: \"#内容二#\" },\n            { id: 3, name: \"#内容三#\" },\n            { id: 4, name: \"#内容四#\" },\n          ],\n        }\n    },\n    methods: {\n      onEditorReady(editor) { // 准备编辑器\n\n      },\n      onEditorBlur(){}, // 失去焦点事件\n      onEditorFocus(){}, // 获得焦点事件\n      onEditorChange({quill,html,text}){\n        // quill:对应实例\n        // html:对应html结构\n        // text:对应文本内容\n\n        this.content = html;\n      }, // 内容改变事件\n      getContent(data) {\n        this.getCursorPosition();\n        this.setCharacter(data.name, this.curTxtPoint);\n      },\n      getCursorPosition() {\n          this.curTxtPoint = this.$refs.myQuillEditor.quill.selection.savedRange.index;\n      },\n      //插入文本的方式\n      setCharacter(str, index) {\n        this.curTxtPoint = \"\";\n        this.$refs.myQuillEditor.quill.insertText(index, str, { color: \"red\" });\n      },\n    },\n    computed: {\n        editor() {\n            return this.$refs.myQuillEditor.quill;\n        },\n    },\n    created() {\n        // ...请求，拿到后台返回的内容对content进行赋值\n    }\n}\n<\/script>\n")])])])])},[],!1,null,null,null);t.default=l.exports}}]);